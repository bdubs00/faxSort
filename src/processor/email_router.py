# email_router.py
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


class O365EmailRouter:
    def __init__(self):
        # Load O365 SMTP configuration
        self.smtp_host = os.getenv("SMTP_HOST", "smtp.office365.com")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.smtp_username = os.getenv("SMTP_USERNAME")
        self.smtp_password = os.getenv("SMTP_PASSWORD")
        self.default_from_email = os.getenv("DEFAULT_FROM_EMAIL")

        # Load email mappings from environment variable
        self.email_mappings = {}
        mappings_str = os.getenv("EMAIL_MAPPINGS", "")
        if mappings_str:
            mappings = [m.strip() for m in mappings_str.split(",") if m.strip()]
            for mapping in mappings:
                if ":" in mapping:
                    doc_type, email = mapping.split(":", 1)
                    self.email_mappings[doc_type.strip()] = email.strip()

        if not all([self.smtp_username, self.smtp_password, self.default_from_email]):
            missing = []
            if not self.smtp_username: missing.append("SMTP_USERNAME")
            if not self.smtp_password: missing.append("SMTP_PASSWORD")
            if not self.default_from_email: missing.append("DEFAULT_FROM_EMAIL")
            raise ValueError(f"Missing required environment variables: {', '.join(missing)}")

    def _format_timestamp(self, timestamp):
        """Helper method to handle timestamp conversion"""
        try:
            # If timestamp is already an integer
            if isinstance(timestamp, int):
                return datetime.fromtimestamp(timestamp)
            # If timestamp is a string that looks like an integer
            elif isinstance(timestamp, str) and timestamp.isdigit():
                return datetime.fromtimestamp(int(timestamp))
            # If timestamp is a string in ISO format
            elif isinstance(timestamp, str):
                try:
                    return datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                except ValueError:
                    # Default to current time if parsing fails
                    logger.warning(f"Could not parse timestamp {timestamp}, using current time")
                    return datetime.now()
            else:
                # Default to current time
                logger.warning("Invalid timestamp format, using current time")
                return datetime.now()
        except Exception as e:
            logger.error(f"Error processing timestamp {timestamp}: {str(e)}")
            return datetime.now()

    async def send_fax_email(self, document_type: str, pdf_path: str, fax_metadata: dict):
        """Send fax to appropriate email address based on document type using O365 SMTP"""
        if not document_type:
            logger.error("No document type provided")
            return False

        if document_type not in self.email_mappings:
            logger.warning(f"No email mapping found for document type: {document_type}")
            return False

        to_email = self.email_mappings[document_type]

        # Create email
        msg = MIMEMultipart()
        msg['From'] = self.default_from_email
        msg['To'] = to_email
        msg['Subject'] = f"Fax Received - {document_type}"

        # Format the timestamp
        fax_time = self._format_timestamp(fax_metadata.get('time', 0))

        # Create email body with fax metadata
        body = f"""
A new fax has been received and classified as: {document_type}

Fax Details:
- Received: {fax_time.strftime('%Y-%m-%d %H:%M:%S')}
- From: {fax_metadata.get('fromNumber', 'Unknown')}

This email was automatically generated by the BWFCS (Brandon Winston Fax Classification System).
"""
        msg.attach(MIMEText(body, 'plain'))

        # Attach PDF
        try:
            with open(pdf_path, 'rb') as f:
                pdf_attachment = MIMEApplication(f.read(), _subtype='pdf')
                pdf_attachment.add_header('Content-Disposition', 'attachment',
                                          filename=os.path.basename(pdf_path))
                msg.attach(pdf_attachment)
        except Exception as e:
            logger.error(f"Error attaching PDF {pdf_path}: {str(e)}")
            return False

        # Send email using O365 SMTP
        try:
            with smtplib.SMTP(self.smtp_host, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)
                logger.info(f"Successfully sent fax email to {to_email}")
                return True
        except Exception as e:
            logger.error(f"Error sending email: {str(e)}")
            return False